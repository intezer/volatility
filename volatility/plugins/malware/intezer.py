# Volatility
# Copyright (C) 2007-2013 Volatility Foundation
# Copyright (c) 2008 Brendan Dolan-Gavitt <bdolangavitt@wesleyan.edu>
#
# Additional Authors:
# Mike Auty <mike.auty@gmail.com>
#
# This file is part of Volatility.
#
# Volatility is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Volatility is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Volatility.  If not, see <http://www.gnu.org/licenses/>.
#
import copy
import json
import os
import re
from StringIO import StringIO
from urlparse import urljoin

from volatility import commands
from volatility.plugins import imageinfo
from volatility.plugins import taskmods
from volatility.plugins.cmdline import Cmdline
from volatility.plugins.dlldump import DLLDump
from volatility.plugins.malware.malfind import Malfind
from volatility.plugins.procdump import ProcDump

VERSION = '1.5.1'
INTEZER_API_KEY = os.environ.get('INTEZER_API_KEY')
BASE_URL = 'https://analyze.intezer.com'
API_URL = urljoin(BASE_URL, '/api')
API_VERSION = 'v2-0'
ANALYSES_URL = urljoin(BASE_URL, '/analyses')

URLS = {
    'get_access_token': '{}/{}/get-access-token'.format(API_URL, API_VERSION),
    'memory-dump-scan': '{}/{}/{}'.format(API_URL, API_VERSION, 'memory-dump-scan'),
    'add-binary': '{}/{}/{}'.format(API_URL, API_VERSION, 'scans/{{}}'),
}

MESSAGES = {
    'missing_api_key': 'Please set INTEZER_API_KEY in your environment variables',
    'authentication_failure': 'Failed to authenticate Intezer service',
    'connection_error': 'Failed to connect to the Intezer cloud platform',
    'insufficient_quota': 'You have reached your daily quota. Please contact support@intezer.com to discuss your plan options'
}


def get_json(config, plugin_class):
    str_io = StringIO()
    plugin = plugin_class(copy.deepcopy(config))
    plugin.render_json(str_io, plugin.calculate())
    return json.loads(str_io.getvalue())


def get_username(s):
    # TODO: This is wrong, need to figure out how to get the username
    result = re.search('/Users/(.*)/', s)
    return result.group(1)


# code_reuse/scans/{scan_id}/files-info
# code_reuse/scans/{scan_id}/processes/{pid}/loaded-modules-info
def get_procdump_info(config, ps_path_dict):
    proc_dumps = get_json(config, ProcDump)['rows']
    proc_dumps_info = list()

    for procdump in proc_dumps:
        # TODO: Add size_in_bytes calculation.
        # TODO: Add sha256 calculation
        pd_info = dict()
        pd_info['base_address'] = procdump[0]
        result = re.search('executable.(.*).', str(procdump[3]))
        if result:
            pid = result.group(1).split('.')[0]
            pd_info['file_path'] = ps_path_dict[pid]
        proc_dumps_info.append(pd_info)

    return proc_dumps_info


# code_reuse/scans/{scan_id}/processes/{pid}/loaded-modules-info
# code_reuse/scans/{scan_id}/memory-module-dumps-info
def get_dlldump_info(config, ps_path_dict):
    dll_dumps = get_json(config, DLLDump)['rows']
    dll_dumps_info = list()

    for dll_dump in dll_dumps:
        # TODO: Add size_in_bytes calculation.
        # TODO: Add sha256 calculation
        dll_d_info = dict()
        dll_d_info['base_address'] = dll_dump[0]
        result = re.search('module.(.*).', str(dll_dump[4]))
        if result:
            pid = result.group(1).split('.')[0]
            dll_d_info['file_path'] = ps_path_dict[pid]
            dll_d_info['pid'] = pid
        dll_dumps_info.append(dll_d_info)

    return dll_dumps_info


# code_reuse/scans/{scan_id}/processes-info
def get_ps_list(config):
    process_list = get_json(config, taskmods.PSList)
    cmd_lines = get_json(config, Cmdline)
    ps_path_dict = dict()
    ps_list = list()
    for cmd_line in cmd_lines['rows']:
        ps_path_dict[str(cmd_line[1])] = str(cmd_line[2])

    for cur_process in process_list['rows']:
        ps = dict(pid=str(cur_process[2]),
                  ppid=str(cur_process[3]),
                  process_path=ps_path_dict[str(cur_process[2])],
                  start_time=str(cur_process[8]))
        ps_list.append(ps)

    return ps_list, ps_path_dict


class Intezer(commands.Command):
    def __init__(self, config, *args, **kwargs):
        commands.Command.__init__(self, config, *args, **kwargs)
        self.image_info = get_json(config, imageinfo.ImageInfo)['rows'][0]
        # self.user_name = get_username(self.image_info[2])
        config.PROFILE = str(self.image_info[0]).split(',')[0]
        self.proc_dump = ProcDump(config, *args, **kwargs)
        self.ps_list = taskmods.PSList(config, *args, **kwargs)
        self.mal_find = Malfind(config, *args, **kwargs)
        self.dll_dump = DLLDump(config, *args, **kwargs)
        self.cmd_line = Cmdline(config, *args, **kwargs)

    # api/scans
    # code_reuse/scans/{scan_id}/host-info
    def get_host_info(self, image_info):
        # TODO: get username
        host_info = dict()
        workdir_info = image_info[2]
        host_info['workdir'] = workdir_info[workdir_info.find("(") + 1:workdir_info.find(")")]
        host_info['os_version'] = self._config.PROFILE[:-3]
        host_info['system_type'] = self._config.PROFILE[-2:]

        return host_info

    def execute(self):
        # self.proc_dump.execute()
        # self.mal_find.execute()
        # self.dll_dump.execute()
        ps_list, ps_path_dict = get_ps_list(self._config)
        proc_dumps_info = get_procdump_info(self._config, ps_path_dict)
        dll_dumps_info = get_dlldump_info(self._config, ps_path_dict)
        host_info = self.get_host_info(self.image_info)

        print(host_info)
        print(ps_list)
        print(proc_dumps_info)
        print(dll_dumps_info)
